#!/bin/bash
#    Cross: Cross-platform package manager.
#    Copyright (C) 2012 Joey Lawrance
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Set platform
if [[ $OSTYPE == "msys" ]]; then
    PLATFORM="windows-msys"
    INSTALLER="powershell epic-win.ps1 install"
elif [[ $OSTYPE == "cygwin" ]]; then
    PLATFORM="windows-cygwin"
    INSTALLER="/path/to/setup-1.7.exe --quiet-mode --download --local-install --packages abook" # FIXME: this is surely broken (didn't bother to install Cygwin)
elif [[ $OSTYPE == darwin* ]]; then
    PLATFORM="macosx"
    INSTALLER="brew install"
elif [[ $OSTYPE == "linux-gnu" && -n "$(which apt-get)" ]]; then
    PLATFORM="linux-debian"
    INSTALLER="sudo apt-get install"
elif [[ $OSTYPE == "linux-gnu" && -n "$(which yum)" ]]; then
    PLATFORM="linux-redhat"
    INSTALLER="sudo yum install"
elif [[ $OSTYPE == "linux-gnu" ]]; then
    PLATFORM="linux-gnu"
    INSTALLER=""
else
    echo "I do not know how to handle $OSTYPE."
    exit
fi

# Cross-platform file open
file_open() {
    if [[ $PLATFORM == windows* ]]; then
        start "$1"
    elif [[ $PLATFORM == linux* ]]; then
        gnome-open "$1"
    elif [[ $PLATFORM == "macosx" ]]; then
        open "$1"
    fi
}

# $DESTFOLDER is predefined
DESTFOLDER="download"
INSTALLFOLDER="bin"

# TITLE="Package Name"
# CHECK="$(which package-name)$(ls /path/to/package 2> /dev/null)" # TODO: The command sub shouldn't be in the CHECK, but happen during the check
# URL="http://url/to/project/"
# DEPENDS=(package dependencies list)
# DOWNLOAD="http://url/to/platform/specific/package/download"
# DESTFILE="localfilename.zip,localfilename.msi,localfilename.exe,localfilename.dmg,localfilename.pkg"
# COMMAND="platform-specific command to use, instead of cross platform file open"

# Pass package name to an existing package manager, if possible.
delegate_install() {
    if [ -n "${INSTALLER}" ]; then
        eval "${INSTALLER} $1"
    else
        echo "Unknown package(s): $1."
    fi
}

handle_zip() {
    mkdir -p "${INSTALLFOLDER}/$1"
    unzip "${DESTINATION}" -d "$INSTALLFOLDER/$1"
}

handle_msi() {
    file_open "${DESTINATION}"
}

handle_dmg() {
    file_open "${DESTINATION}"
}

handler() {
    if [[ "$1" == *.zip ]]; then
        handle_zip "$1"
    elif [[ "$1" == *.msi ]]; then
        handle_msi
    elif [[ "$1" == *.dmg ]]; then
        handle_dmg
    else
        file_open "${DESTINATION}"
    fi
}

# Install using cURL (assumes we already ran source on package file)
curl_install() {
    DESTINATION="${DESTFOLDER}/${DESTFILE}"
    mkdir -p "$DESTFOLDER"
    mkdir -p "$INSTALLFOLDER"
    # We need to curl to proceed
    if [ -z "$(which curl)" ]; then
        echo "ERROR: You must download and install cURL first."
        echo "Look here: http://curl.haxx.se/download.html"
        exit
    fi
    # Proceed
    curl -L "${DOWNLOAD}" > "${DESTINATION}"
    # If the package has an alternate COMMAND, run it
    if [ -n "${COMMAND}" ]; then
        eval ${COMMAND}
        echo "You should add $DESTINATION to the PATH."
        if [[ $PLATFORM == windows* ]]; then
            echo "Go to Computer -> System properties -> Advanced system settings -> Environment Variables..."
        fi
    # Otherwise, open the DESTINATION file
    else
        file_open "${DESTINATION}"
    fi
}

# Install a package
install_package() {
    package_file="packages/$PLATFORM/$1.txt"
    # If we don't know about the package, delegate implicitly
    if [ ! -e "${package_file}" ]; then
        delegate_install "$1"
    else
        # Load the package file
        source "${package_file}"
        # Check if it already exists. If not, download and install
        if [ -z "${CHECK}" ]; then # FIXME and elsewhere
            # If it has dependencies, install those first.
            if [[ -n "${DEPENDS[@]}" ]]; then
                $0 install "${DEPENDS[@]}"
            fi
            echo "Getting and installing ${TITLE}..."
            echo "See: ${URL}"
            
            # If the package has a DOWNLOAD url and a DESTFILE, use curl.
            if [[ -n "${DOWNLOAD}" && -n "${DESTFILE}" ]]; then
                curl_install
            # If the package explicitly delegates, use the package manager.
            elif [[ -n "${PACKAGES[@]}" ]]; then
                delegate_install "${PACKAGES[@]}"
            fi
        # If the package exists (and we didn't say quiet), say we've got it.
        elif [[ -z "$2" ]]; then
            echo "${TITLE} is already installed."
        fi
    fi
}

install_packages() {
    for package in $@; do
        install_package "${package}"
    done
}

clean() {
    rm -rf "$DESTFOLDER"
}

usage() {
    echo "Cross: Cross-platform pacakge manager"
    echo
    echo "Usage:"
    echo "   $0 command"
    echo "   $0 install package1 [package2 ...]"
    echo
    echo "Commands: "
    echo "   list      Show list of packages"
    echo "   clean     Remove downloaded archive files"
    echo
    echo "Example: $0 install libreoffice calibre"
}

if [[ $# == 0 ]]; then
    usage
    exit
elif [[ $# == 1 && $1 == "list" ]]; then
    for file in $(find packages/$PLATFORM/*.txt 2> /dev/null); do
        source "$file"
        if [[ -z "${CHECK}" ]]; then
            printf "%-15s %s\n" "${TITLE}" "${DESCRIPTION}."
        else
            printf "%-15s %s\n" "${TITLE}" "(Installed) ${DESCRIPTION}."        
        fi
    done
elif [[ $# == 1 && $1 == "clean" ]]; then
    clean
elif [[ $# > 1 && $1 == "install" ]]; then
    if [[ $PLATFORM == "macosx" ]]; then
        install_package "brew" "quiet"
    elif [ ! -e ".unrestricted" ]; then
        # Enable powershell scripts to run
        powershell -command "Start-Process powershell -verb runas -ArgumentList '-command Set-ExecutionPolicy Unrestricted'"
        touch .unrestricted
    fi
    install_packages ${@:2}
else
    usage
fi
